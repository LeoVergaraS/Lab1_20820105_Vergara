#lang racket

(require "TDAfecha.rkt")
(require "TDAparadigmadocs.rkt")
(require "TDAdocumento.rkt")
(require "TDAusuario.rkt")
(require "TDAacceso.rkt")
(require "TDAhistorial.rkt")

; Register

; Descripcion: funcion que verifica si existe un nombre de usuario en la lista de usuario.
; Dominio: Lista TDA usuario X string
; Recorrido: booleano
(define equalUser?(lambda (listaUsuario usuario)
                    ; si se llego al final,
                    (if (null? listaUsuario)
                        ; caso verdadero: retorno un False debido a que no se
                        ; encontro el nombre de usuario en la lista.
                        #f
                        ; caso falso: Se verifica si es igual el nombre de usuario de
                        ; la cabeza de la lista al nombre entregado.
                        (if (equal? (getNombreusuario(car listaUsuario)) usuario)
                            ; caso verdadero: si son iguales se retorna un True
                            #t
                            ; caso falso: si no si revisando con la cola de la lista.
                            (equalUser? (cdr listaUsuario) usuario)
                            )
                        )
                    )
  )

; Descripcion: funcion que actualiza la lista de usuario de paradigmadocs.
;              Retorna la lista de TDA usuario, donde el ultimo elemento es el
;              nuevo usuario registrado. Se utiliza recursion natural.
; Dominio: Lista TDA usuario X string X string X TDA fecha
; Recorrido: Lista TDA usuario
(define actualizarLista(lambda (listaUsuario nombreusuario contrasenia fecha)
                         ; Si no hay mas elementos en la lista de usuarios,
                         (if (null? listaUsuario)
                             ; caso verdadero: agrego el nuevo usuario.
                             (cons (usuario nombreusuario contrasenia fecha) null)
                             ; caso falso: copio cada elemento de la lista de usuario.
                             (cons (car listaUsuario) (actualizarLista (cdr listaUsuario) nombreusuario contrasenia fecha))
                             )
                         )
  )


; Descripción: función que registra un usuario en paradigmadocs,
;              si el nombre de usuario existe en paradigmadocs no se registra.
;              Retorna paradigmadocs con el usuario registrado.
;              Se utiliza recursion natural en la funcion actualizarLista.
; Dominio: TDA paradigmadocs X TDA fecha X string X string
; Recorrido: TDA paradigmadocs
(define register (lambda (paradigmadocs fecha nombreusuario contrasenia)
                   ; Si el usuario existe en la lista de usuario de paradigmadocs,
                   ; se deja igual paradigmadocs. En caso contrario se agrega el nuevo
                   ; usuario a la lista.
                   (if (equalUser? (getListaUsuario paradigmadocs) nombreusuario)
                       ; caso verdadero: retorno paradigmadocs
                       paradigmadocs
                       ; caso falso: se actualiza la lista de usuario. Se utiliza el
                       ; modificador para la lista de usuario del TDA paradigmadocs.
                       (setListaUsuario
                        ; se le pasa paradigmadocs
                        paradigmadocs
                        ; y la lista actualizada.
                        (actualizarLista
                         ; Le paso la lista de usuario.
                         (getListaUsuario paradigmadocs)
                         ; Le paso los datos para crear el TDA usuario del nuevo usuario.
                         nombreusuario
                         contrasenia
                         fecha)
                       )
                      )
                   )
  )





; login

; Descripcion: funcion que actualiza la lista de usuario, copiando sus 
;              elementos y alterando el estado del usuario que tiene el 
;              mismo nombre al entregado. Retorna la lista de usuario. 
;              Se utiliza recursion natural.
; Dominio: Lista TDA usuario X string
; Recorrido: Lista TDA usuario.
(define des->con(lambda(listausuario nombreusuario)
                  ; Se verifica si es vacia la lista,
                  (if (null? listausuario)
                      ; caso verdadero: retorna un null.
                      null
                      ; caso falso: se verifica si el nombre de usuario
                      ; de la cabeza de la lista es igual al entregado,
                      (if (equal? (getNombreusuario (car listausuario)) nombreusuario)
                          ; caso verdadero: cambio el estado del usuario, y lo agrego    
                          (cons (setEstado (car listausuario) "Conectado") (des->con (cdr listausuario) nombreusuario))
                          ; caso falso: agrego la cabeza de la lista.
                          (cons (car listausuario) (des->con (cdr listausuario) nombreusuario))
                          )
                      )
                  )
  )

; Descripcion: funcion que busca el usuario en la lista de usuarios.
;              Retorna el usuario.
; Dominio: Lista TDA usuario X string
; Recorrido: TDA usuario
(define buscarUsuario(lambda(lista nombreusuario)
                       ; Se verifica si es igual el nombre de usuario ingresado
                       ; al nombre de usuario de la cabeza de la lista,
                       (if (equal? (getNombreusuario(car lista)) nombreusuario)
                           ; caso verdadero: retorno ese usuario
                           (car lista)
                           ; caso falso: Se busca con la cola de la lista.
                           (buscarUsuario (cdr lista) nombreusuario)
                           )
                       )
  )

; Descripcion: funcion que logea un usuario en paradigmadocs. Si existe el
;              usuario y la contraseña es correcta, se retorna la funcion
;              evaluada en paradigmadocs actualizando el estado del usuario.
;              Si no se retorna la funcion evaluada en paradigmadocs de entrada.
;              Se utilizo recursion natural con la funcion des->con.
; Dominio: TDA paradigmadocs X string X string X funcion
; Recorrido: Funcion X paradigmadocs
(define login(lambda(paradigmadocs nombreusuario contrasenia funcion)
               ; verifica si el usuario existen en paradigmadocs,
               (if (equalUser? (getListaUsuario paradigmadocs) nombreusuario)
                   ; caso verdadero: verifica si la contraseña es correcta,
                   (if (equal? (getContrasenia(buscarUsuario (getListaUsuario paradigmadocs) nombreusuario)) contrasenia)
                       ; caso verdadero: aplica la funcion en paradigmadocs
                       ; donde el usuario tenga el estado conectado.
                       (funcion
                        ; actualizo paradigmadocs. 
                        (setListaUsuario
                         ; para ello le paso el actual paradigmadocs.
                         paradigmadocs
                         ; y actualizo la lista de usuario, cambiando
                         ; el estado del usuario de desconectado a conectado.
                         (des->con (getListaUsuario paradigmadocs) nombreusuario)))
                       ; caso falso: retorno la funcion evaluada en paradigmadocs de entrada.
                       (funcion paradigmadocs)
                       )
                   ; caso falso: retorno la funcion evaluada en paradigmadocs de entrada.
                   (funcion paradigmadocs)
                   )
               )
  )



; create

; Descripcion: funcion que verifica si un usuario esta conectado.
;              Retorna un Booleano.
; Dominio: Lista TDA usuario.
; Recorrido: booleano.
(define conectado? (lambda (listausuarios)
                     ; Se verifica si la lista es vacia,
                     (if (null? listausuarios)
                         ; caso verdadero: significa que no se encontro
                         ; un usuario conectado, se retorna un False.
                         #f
                         ; caso falso: se verifica si el usuario de la
                         ; cabeza de la lista esta conectado,
                         (if (equal? (getestado (car listausuarios)) "Conectado")
                             ; caso verdadero: retorno un True
                             #t
                             ; caso falso: verifico con la cola de la lista.
                             (conectado? (cdr listausuarios))
                             )
                         )
                     )
  )

; Descripcion: funcion que busca el usuario conectado en una lista de usuarios.
;              Retorna el usuario conectado.
; Dominio: Lista TDA usuario
; Recorrido: TDA usuario
(define buscarConectado(lambda(lista)
                         ; Se verifica si el estado del usuario de
                         ; la cabeza de la lista es conectado,
                         (if (equal? (getestado(car lista)) "Conectado")
                             ; caso verdadero: retorno ese usuario.
                             (car lista)
                             ; caso falso: busco en la cola de la lista.
                             (buscarConectado (cdr lista))
                             )
                         )
  )

; Descripcion: funcion que agrega un documento en la lista de documentos de paradigmadocs.
;              Retorna la lista con el nuevo documento.
; Dominio: Lista TDA documento X string X TDA fecha X string X string 
; Recorrido: Lista TDA documento.
(define agregarDocumento(lambda (lista autor fecha nombre contenido)
                          ; Se verifica si la lista esta vacia,
                          (if (null? lista)
                              ; caso verdadero: agrego el nuevo documento.
                              (cons (documento autor fecha nombre contenido) null)
                              ; caso falso: agrego la cabeza de la lista y sigo con la cola.
                              (cons (car lista) (agregarDocumento (cdr lista) autor fecha nombre contenido))
                              )
                          )
  )

; Descripcion: funcion que cambia el usuario por el mismo usuario con el estado
;              en desconectado. Retorna la lista de usuario actualizada.
;              Se utiliza recursion natural.
; Dominio: Lista TDA usuario X TDA usuario.
; Recorrido: Lista TDA usuario.
(define agregaLista(lambda(lista usuario)
                     ; Se verifica si es vacia la lista,
                     (if (null? lista)
                         ; caso verdadero: se retorna null.
                         null
                         ; caso falso: se verifica si el estado del usuario 
                         ; de la cabeza de la lista es conectado,
                         (if (equal? (getestado(car lista)) "Conectado")
                             ; caso verdadero: agrego el usuario entregado.
                             (cons usuario (agregaLista (cdr lista) usuario))
                             ; caso falso: agrego la cabeza de la lista.
                             (cons (car lista) (agregaLista (cdr lista) usuario))
                             )
                         )
                     )
  ) 

; Descripcion: funcion que crea un archivo en paradigmadocs, para ello se 
;              debe estar logeado. Retorna paradigmadocs con el archivo creado.
;              Se utiliza recursion natural con agregaLista y agregarDocumento.
; Dominio: TDA paradigmadocs X TDA fecha X string X string
; Recorrido: TDA paradigmadocs
(define create(lambda (paradigmadocs)(lambda(fecha nombre contenido)
                                       ; Se verifica si hay un usuario conectado,
                                       (if (conectado? (getListaUsuario paradigmadocs))
                                           ; caso verdadero: Primero actualizo la lista de 
                                           ; documentos y luego desconecto al usuario.
                                           (setListaUsuario
                                            ; Se actualiza la lista de documentos,
                                            (setListaDocumentos
                                             ; se le pasa la actual plataforma
                                             paradigmadocs
                                             ; y agrego el nuevo documento a la lista
                                             ; de documentos.
                                             (agregarDocumento
                                              (getListaDocumentos paradigmadocs)
                                              (getNombreusuario(buscarConectado(getListaUsuario paradigmadocs)))
                                              fecha
                                              nombre
                                              ((getFE paradigmadocs) contenido)
                                              )
                                             )
                                            ; Cambio el estado del usuario a desconectado.
                                            (agregaLista
                                             (getListaUsuario paradigmadocs)
                                             (setEstado
                                              (buscarConectado(getListaUsuario paradigmadocs))
                                              "Desconectado")
                                             )
                                            )
                                           ; caso falso: no altero la plataforma.
                                           paradigmadocs
                                           )
                                       )
                
                )
  )

; share, cambio o no cambio?

; Descripcion:
; Dominio:
; Recorrido: 
(define tienePermiso? (lambda (listaPermiso usuario)
                        (if (null? listaPermiso)
                            ; caso verdadero
                            #f
                            ; caso falso
                            (if (equal? (getUsuario (car listaPermiso)) usuario)
                                ; caso verdadero
                                #t
                                ; caso falso
                                (tienePermiso? (cdr listaPermiso) usuario)
                                )
                            )
                        )
  )

; Descripcion:
; Dominio:
; Recorrido: 
(define agregarListaPermiso(lambda (listaPermiso accesses aux)
                             (if (null? accesses)
                                 ; caso verdadero
                                 (if (null? listaPermiso)
                                     ; caso verdadero
                                     aux
                                     ; caso falso
                                     (if (tienePermiso? aux (getUsuario (car listaPermiso)))
                                         ; caso verdadero
                                         (agregarListaPermiso (cdr listaPermiso) null aux)
                                         ; caso falso
                                         (agregarListaPermiso (cdr listaPermiso) null (cons (car listaPermiso) aux))
                                         )
                                     )
                                 ; caso falso
                                 (agregarListaPermiso listaPermiso (cdr accesses) (cons (car accesses) aux))
                                 )
                             )
  )

; Descripcion:
; Dominio:
; Recorrido: 
(define actualizarListaDocumentos(lambda (lista documento)
                               (if (null? lista)
                                   ; caso verdadero
                                   null
                                   ; caso falso
                                   (if (and(equal? (getNombreDocumento documento) (getNombreDocumento (car lista)))
                                           (equal? (getAutor documento) (getAutor (car lista))))
                                       ; caso verdadero
                                       (cons documento (actualizarListaDocumentos (cdr lista) documento))
                                       ; caso falso
                                       (cons (car lista) (actualizarListaDocumentos (cdr lista) documento))
                                       )
                                   )
                               )
  )

; Descripcion:
; Dominio:
; Recorrido: 
(define contarDocumentos(lambda (listaDocumentos usuario i)
                          (if (null? listaDocumentos)
                              ; caso verdadero
                              i
                              ; caso falso
                              (if (equal? (getAutor(car listaDocumentos)) usuario)
                                  ; caso verdadero
                                  (contarDocumentos (cdr listaDocumentos) usuario (+ i 1))
                                  ; caso falso
                                  (contarDocumentos (cdr listaDocumentos) usuario i)
                                  )
                              )
                          )
  )

; Descripcion:
; Dominio:
; Recorrido: 
(define share(lambda(paradigmadocs)(lambda(idDoc . accesses)
               (if (conectado? (getListaUsuario paradigmadocs))
                   ; caso verdadero
                   (if (>= (contarDocumentos (getListaDocumentos paradigmadocs) (getNombreusuario(buscarConectado(getListaUsuario paradigmadocs))) 0) idDoc)
                       ; caso verdadero
                       (setListaUsuario
                        (setListaDocumentos
                         paradigmadocs
                         (actualizarListaDocumentos
                          (getListaDocumentos paradigmadocs)
                          (setListaPermiso
                           (list-ref (filter (lambda(documento)(equal? (getAutor documento) (getNombreusuario(buscarConectado (getListaUsuario paradigmadocs)))))(getListaDocumentos paradigmadocs))(- idDoc 1))
                           (agregarListaPermiso
                            (getListaPermiso
                             (list-ref (filter (lambda(documento)(equal? (getAutor documento) (getNombreusuario(buscarConectado (getListaUsuario paradigmadocs)))))(getListaDocumentos paradigmadocs))(- idDoc 1)))
                             accesses
                             null))))
                        (agregaLista
                         (getListaUsuario paradigmadocs)
                         (setEstado
                          (buscarConectado(getListaUsuario paradigmadocs))
                          "Desconectado")))
                       ; caso falso
                       (setListaUsuario paradigmadocs (agregaLista (getListaUsuario paradigmadocs) (setEstado (buscarConectado(getListaUsuario paradigmadocs)) "Desconectado")))
                       )
                   ; caso falso
                   paradigmadocs
                                           )
                                     )
               )
  )


; add

; Descripcion: funcion que verifica si un usuario tiene permiso de escritura
;              sobre un documento. Retorna un booleano.
; Dominio: Lista TDA Acceso X string
; Recorrido: Booleano.
(define tienePermisoEscritura? (lambda(listaPermiso usuario)
                                 ; Se verifica si la lista esta vacia,
                                 (if (null? listaPermiso)
                                     ; caso verdadero: se retorna un False.
                                     #f
                                     ; caso falso: Se verifica si el acceso de la cabeza de la lista,
                                     ; tiene el mismo nombre del nombre de usuario entregado y
                                     ; si el permiso es de escritura, 
                                     (if (and(equal? (getUsuario (car listaPermiso)) usuario)
                                             (equal? (getPermiso (car listaPermiso)) #\w))
                                         ; caso verdadero: se retorna un True
                                         #t
                                         ; caso falso: se verifica con la cola de la lista.
                                         (tienePermisoEscritura? (cdr listaPermiso) usuario)
                                         )
                                     )
                                 )
  )

; Descripcion: funcion que agrega una version a la lista de historial.
;              Retorna la lista de historial actualizada. Se utiliza la recusrion natural.
; Dominio: Lista TDA Historial X entero positivo X string X string X TDA fecha.
; Recorrido: Lista TDA historial.
(define agregarListaHistorial(lambda(listaHistorial i contenido usuario fecha)
                               ; Se verifica si la lista esta vacia,
                               (if (null? listaHistorial)
                                   ; caso verdadero: agrego la nueva version.
                                   (cons (historial i contenido usuario fecha) null)
                                   ; caso falso: agrego la cabeza de la lista y continuo con la cola.
                                   (cons (car listaHistorial)(agregarListaHistorial (cdr listaHistorial) (+ i 1) contenido usuario fecha))
                                   )
                               )
  )

; Descripcion: funcion que agrega texto a un documento, para ello es necesario
;              ser propiertatio o tener permiso de escritura. Retorna paradigmadocs
;              con la lista de documento actualizada, con el nuevo contenido del
;              documento. Se utiliza recursion natural en la funcion agregarListaHistorial.
; Dominio: TDA paradigmadocs X entero positivo X TDA fecha X string
; Recorrido: TDA paradigmadocs
(define add(lambda (paradigmadocs)(lambda (idDoc fecha contenidoTexto)
                                    ; Se verifica si hay un usuario conectado.
                                    (if (conectado? (getListaUsuario paradigmadocs))
                                        ; caso verdadero: Se verifica si ese usuario es
                                        ; propietario del archivo o tiene permiso de escritua.
                                        (if (or
                                             ; es propietario?
                                             (equal?
                                              (getAutor(list-ref(getListaDocumentos paradigmadocs) (- idDoc 1)))
                                              (getNombreusuario(buscarConectado(getListaUsuario paradigmadocs))))
                                             ; o tiene Permisos?
                                             (tienePermisoEscritura?
                                              (getListaPermiso (list-ref(getListaDocumentos paradigmadocs) (- idDoc 1)))
                                              (getNombreusuario(buscarConectado(getListaUsuario paradigmadocs)))
                                              )
                                             )
                                            ; caso verdadero: Primero se actuliza la lista
                                            ; de documentos y luego la lista de usuario.
                                            (setListaUsuario
                                             ; Para actualizar la lista de documentos,
                                             (setListaDocumentos
                                              ; se le pasa la actual plataforma
                                              paradigmadocs
                                              ; y actualizo la lista de documentos.
                                              (actualizarListaDocumentos
                                               (getListaDocumentos paradigmadocs)
                                               ; Antes de agregar el contenido, 
                                               (setContenido
                                                ; se actualiza la lista de historial del documento.
                                                ; Para ello, se agrega la version activa al historial.
                                                (setListaHistorial
                                                 ; Se le pasa el documento
                                                 (list-ref(getListaDocumentos paradigmadocs) (- idDoc 1))
                                                 ; y la lista de historial actualizada.
                                                 (agregarListaHistorial
                                                  ; se le pasa la lista de historial del documento
                                                  (getListaHistorial(list-ref(getListaDocumentos paradigmadocs)(- idDoc 1)))
                                                  ; un acumulador para saber el id de la version.
                                                  0
                                                  ; el contenido de la version activa.
                                                  (getContenido(list-ref(getListaDocumentos paradigmadocs)(- idDoc 1)))
                                                  ; el nombre de quien modifico el contenido del documento.
                                                  (getNombreusuario(buscarConectado(getListaUsuario paradigmadocs)))
                                                  ; la fecha de modificacion
                                                  fecha)
                                                 )
                                                ; ahora el contenido del documento se actualiza, se une el 
                                                ; contenido de la version activa y el texto que se quiere
                                                ; agregar, pasando esta ultima por la funcion de encriptado.
                                                (string-append
                                                 (getContenido(list-ref(getListaDocumentos paradigmadocs)(- idDoc 1)))
                                                 " "
                                                 ((getFE paradigmadocs) contenidoTexto)
                                                 )
                                                )
                                               )
                                              )
                                             ; luego de actualizar la lista de documentos, se desconecta el usuario.
                                             (agregaLista
                                              (getListaUsuario paradigmadocs)
                                              (setEstado
                                               (buscarConectado(getListaUsuario paradigmadocs))
                                               "Desconectado")
                                              )
                                             )
                                            ; caso falso: si no tiene permiso o no es
                                            ; propietario, se desconecta al usuario.
                                            (setListaUsuario
                                             paradigmadocs
                                             (agregaLista
                                              (getListaUsuario paradigmadocs)
                                              (setEstado
                                               (buscarConectado(getListaUsuario paradigmadocs))
                                               "Desconectado")))
                                            )
                                        ; caso falso: si no hay usuarios conectados,
                                        ; se retorna la plataforma.
                                        paradigmadocs
                                        )
                                    )
             )
  )
; restoreVersion

; Descripcion: funcion que restaura una version x de un documento, solo el 
;              propietario puede hacerlo. Retorna paradigmadocs con la version 
;              del documento restaurada. Se utiliza recursion natural.
; Dominio: TDA paradigmadocs X entero positivo X entero positivo
; Recorrido: TDA paradigmadocs 
(define restoreVersion(lambda (paradigmadocs)(lambda(idDoc idVersion)
                                               ; Se verifica si hay un usuario conectado,
                                               (if (conectado? (getListaUsuario paradigmadocs))
                                                   ; caso verdadero: se verifica si es propietario del documento.
                                                   (if
                                                    ; es propietario?
                                                    (equal?
                                                     (getAutor(list-ref(getListaDocumentos paradigmadocs) (- idDoc 1)))
                                                     (getNombreusuario(buscarConectado(getListaUsuario paradigmadocs))))
                                                    ; caso verdadero: Primero se actualiza la lista de documentos
                                                    ; y luego se desconecta al usuario.
                                                    (setListaUsuario
                                                     ; para actualizar la lista,
                                                     (setListaDocumentos
                                                      ; se le pasa la actual plataforma
                                                      paradigmadocs
                                                      ; y agrego el documento actualizado a la lista.
                                                      (actualizarListaDocumentos
                                                       (getListaDocumentos paradigmadocs)
                                                       ; para actualizar el documento
                                                       (setContenido
                                                        ; primero se agrega la version activa a la lista
                                                        ; de historial del documento.
                                                        (setListaHistorial
                                                         (list-ref(getListaDocumentos paradigmadocs) (- idDoc 1))
                                                         (agregarListaHistorial
                                                          (getListaHistorial(list-ref(getListaDocumentos paradigmadocs)(- idDoc 1)))
                                                          0
                                                          (getContenido(list-ref(getListaDocumentos paradigmadocs)(- idDoc 1)))
                                                          (getNombreusuario(buscarConectado(getListaUsuario paradigmadocs)))
                                                          (getFechaModificacion(list-ref(getListaHistorial(list-ref(getListaDocumentos paradigmadocs)(- idDoc 1))) idVersion))))

                                                        ; despues le cambio el contenido.
                                                        (getContenidoVersion(list-ref(getListaHistorial(list-ref(getListaDocumentos paradigmadocs)(- idDoc 1))) idVersion)))))
                                                     ; Ahora se desconecta el usuario.
                                                     (agregaLista
                                                      (getListaUsuario paradigmadocs)
                                                      (setEstado
                                                       (buscarConectado(getListaUsuario paradigmadocs))
                                                       "Desconectado")
                                                      )
                                                     )
                                                    ; caso falso: si no es propietario, se desconecta el usuario.
                                                    (setListaUsuario
                                                     paradigmadocs
                                                     (agregaLista
                                                      (getListaUsuario paradigmadocs)
                                                      (setEstado
                                                       (buscarConectado(getListaUsuario paradigmadocs))
                                                       "Desconectado")
                                                      )
                                                     )
                                                    )
                                                   ; caso falso: si no hay usuarios conectados,
                                                   ; se retorna la plataforma.
                                                   paradigmadocs
                                                   )
                                               )
                        )
  )
; funcion revokeAllAccesses

; Descripcion:
; Dominio:
; Recorrido: 
(define sacarPermisos (lambda (documento usuario)
                        (if (equal? (getAutor documento) usuario)
                            ; caso verdadero
                            (setListaPermiso documento null)
                            ; caso falso
                            documento)
                        )
  )

; Descripcion:
; Dominio:
; Recorrido: 
(define revokeAllAccesses(lambda (paradigmadocs)
                           (if (conectado? (getListaUsuario paradigmadocs))
                               ; caso verdadero
                               (if (not(null? (filter (lambda(documento)(equal? (getAutor documento) (getNombreusuario(buscarConectado (getListaUsuario paradigmadocs)))))(getListaDocumentos paradigmadocs))))
                                   ; caso verdadero
                                      (setListaUsuario
                                       (setListaDocumentos
                                        paradigmadocs
                                        (map
                                         (lambda(documento)(sacarPermisos documento (getNombreusuario(buscarConectado(getListaUsuario paradigmadocs)))))
                                         (getListaDocumentos paradigmadocs))) (agregaLista
                                     (getListaUsuario paradigmadocs)
                                     (setEstado
                                      (buscarConectado(getListaUsuario paradigmadocs))
                                      "Desconectado")))
                                   ; caso falso
                                   (setListaUsuario
                                    paradigmadocs
                                    (agregaLista
                                     (getListaUsuario paradigmadocs)
                                     (setEstado
                                      (buscarConectado(getListaUsuario paradigmadocs))
                                      "Desconectado")))
                                   )
                               
                               ; caso falso
                               paradigmadocs
                               )
                           )
  )

; search

; Descripcion:
; Dominio:
; Recorrido: 
(define tienePermisoLectura?(lambda(listaPermiso usuario)
                              (if (null? listaPermiso)
                                     ; caso verdadero
                                     #f
                                     ; caso falso
                                     (if (and(equal? (getUsuario (car listaPermiso)) usuario)
                                             (equal? (getPermiso (car listaPermiso)) #\r))
                                         ; caso verdadero
                                         #t
                                         ; caso falso
                                         (tienePermisoEscritura? (cdr listaPermiso) usuario)
                                         )
                                     )
                              )
  )

; Descripcion:
; Dominio:
; Recorrido: 
(define search-substring-historial(lambda(historial substring funciondesencriptado)
                          (if (null? historial)
                              ; caso verdadero
                              #f
                              ; caso falso
                              (if (string-contains? (funciondesencriptado (getContenidoVersion(car historial))) substring)
                                  ; caso verdadero
                                  #t
                                  ; caso falso
                                  (search-substring-historial (cdr historial) substring funciondesencriptado)
                                  )
                              )
                          )
  )

; Descripcion:
; Dominio:
; Recorrido: 
(define filtroSearch(lambda (documento nombreusuario texto FD)
                      (if(or(equal? (getAutor documento) nombreusuario)
                         (tienePermisoEscritura? (getListaPermiso documento) nombreusuario)
                         (tienePermisoLectura? (getListaPermiso documento) nombreusuario))
                         ; caso verdadero
                         (or(string-contains? (FD (getContenido documento)) texto)
                            (search-substring-historial (getListaHistorial documento) texto FD))
                         ; caso falso
                         #f
                         )
                      )
  )

; Descripcion:
; Dominio:
; Recorrido: 
(define search(lambda(paradigmadocs)(lambda (texto)
                                      (if (conectado? (getListaUsuario paradigmadocs))
                                          ; caso verdadero
                                          (filter (lambda(documento)(filtroSearch documento (getNombreusuario(buscarConectado(getListaUsuario paradigmadocs))) texto (getFD paradigmadocs))) (getListaDocumentos paradigmadocs))
                                          ; caso falso
                                          null)
                                      )
                )
  )
; paradigmadocs->string

; Descripcion:
; Dominio:
; Recorrido: 
(define documento->string(lambda(documento FD)
                           (string-append
                            "Nombre del texto: "
                            (getNombreDocumento documento)
                            ". Autor: "
                            (getAutor documento)
                            ". Fecha de creacion: "
                            (fecha->string(getFechaCreacion documento))
                            ". Contenido:"
                            "\""
                            (FD (getContenido documento))
                            "\""

                            )
                           )
  )

; Descripcion:
; Dominio:
; Recorrido: 
(define listaDocumento->string(lambda(lista string i FD)
                                (if (null? lista)
                                    ; caso verdadero
                                    string
                                    ; caso falso
                                    (listaDocumento->string (cdr lista) (string-append string "  "(number->string i) ". " (documento->string (car lista) FD) "\n") (+ i 1) FD)
                                    )
                                )
  )

; Descripcion:
; Dominio:
; Recorrido: 
(define fecha->string(lambda(fecha)
                       (string-append
                        (number->string (getDia fecha))
                        "-"
                        (number->string (getMes fecha))
                        "-"
                        (number->string (getAnio fecha))
                        )
                       )
  )

; Descripcion:
; Dominio:
; Recorrido: 
(define paradigmadocs->string(lambda(paradigmadocs)
                               (if (conectado? (getListaUsuario paradigmadocs))
                                   ; caso verdadero
                                   (string-append
                                    "DUCKDOCS:\n Bienvenido "
                                    (getNombreusuario(buscarConectado(getListaUsuario paradigmadocs)))
                                    " (fecha de creacion: "
                                    (fecha->string (getfecha(buscarConectado(getListaUsuario paradigmadocs))))
                                    "). Su lista de documentos es:\n"
                                    (listaDocumento->string (filter (lambda(documento)(equal? (getAutor documento) (getNombreusuario(buscarConectado(getListaUsuario paradigmadocs))))) (getListaDocumentos paradigmadocs))"" 1 (getFD paradigmadocs))
                                    "\n Los documentos que han sido compartido con su cuenta son:\n"
                                    (listaDocumento->string (filter (lambda(documento)(tienePermiso? (getListaPermiso documento) (getNombreusuario(buscarConectado(getListaUsuario paradigmadocs))))) (getListaDocumentos paradigmadocs)) "" 1 (getFD paradigmadocs))
                                    "\n\n Plataforma creada por Leo Vergara Sepulveda. Fecha de creacion: "
                                    (fecha->string (getFecha paradigmadocs))
                                    ". DuckDocs©."
                                    )
                                   ; caso falso
                                   (string-append
                                    "DUCKDOCS:\n Los documentos presente en la plataforma DuckDocs son:\n"
                                    (listaDocumento->string (getListaDocumentos paradigmadocs) "" 1 (getFD paradigmadocs))
                                    "\n\n Plataforma creada por Leo Vergara Sepulveda. Fecha de creacion: "
                                    (fecha->string (getFecha paradigmadocs))
                                    ". DuckDocs©."
                                    )
                                   )
                               )
  )

; (opcionales)
; delete

; Descripcion:
; Dominio:
; Recorrido: 
(define longitud(lambda(contenido numerosdecaracteres)
                  (if (> (string-length contenido) numerosdecaracteres)
                      ; caso verdadero
                      (- (string-length contenido) numerosdecaracteres)
                      ; caso falso
                      0
                      )
                  )
  )

; Descripcion:
; Dominio:
; Recorrido: 
(define delete(lambda(paradigmadocs)(lambda(idDoc fecha numerodecaracteres)
                                      (if (conectado? (getListaUsuario paradigmadocs))
                                        ; caso verdadero
                                        (if (or (equal? (getAutor(list-ref(getListaDocumentos paradigmadocs) (- idDoc 1))) (getNombreusuario(buscarConectado(getListaUsuario paradigmadocs))))
                                                (tienePermisoEscritura? (getListaPermiso (list-ref(getListaDocumentos paradigmadocs) (- idDoc 1))) (getNombreusuario(buscarConectado(getListaUsuario paradigmadocs)))))
                                            ; caso verdadero
                                            (setListaUsuario (setListaDocumentos paradigmadocs (actualizarListaDocumentos (getListaDocumentos paradigmadocs)(setContenido (setListaHistorial (list-ref(getListaDocumentos paradigmadocs) (- idDoc 1)) (agregarListaHistorial (getListaHistorial(list-ref(getListaDocumentos paradigmadocs)(- idDoc 1))) 0 (getContenido(list-ref(getListaDocumentos paradigmadocs)(- idDoc 1))) (getNombreusuario(buscarConectado(getListaUsuario paradigmadocs))) fecha))(substring (getContenido(list-ref(getListaDocumentos paradigmadocs)(- idDoc 1))) 0 (longitud (getContenido(list-ref(getListaDocumentos paradigmadocs)(- idDoc 1))) numerodecaracteres))))) (agregaLista (getListaUsuario paradigmadocs) (setEstado (buscarConectado(getListaUsuario paradigmadocs)) "Desconectado")))
                                            
                                            ; caso falso
                                            (setListaUsuario paradigmadocs (agregaLista (getListaUsuario paradigmadocs) (setEstado (buscarConectado(getListaUsuario paradigmadocs)) "Desconectado")))
                                            )
                                        ; caso falso
                                        paradigmadocs
                                        )
                                      )
                )
  )
; searchAndReplace

; Descripcion:
; Dominio:
; Recorrido: 
(define soniguales(lambda (string substring v1)
                    (if (null? substring)
                        ; caso verdadero
                        v1
                        ; caso falso
                        (if (null? string)
                            ; caso verdadero
                            #f
                            ; caso falso
                            (if (equal? (car string) (car substring))
                                ; caso verdadero
                                (soniguales (cdr string) (cdr substring) #t)
                                ; caso falso
                                #f)
                            )
                        )
                    )
  )

; Descripcion:
; Dominio:
; Recorrido: 
(define posiciones(lambda(listaString listaSubstring i listaPos)
                    (if (null? listaString)
                               ; caso verdadero
                               (reverse listaPos)
                               ; caso falso
                               (if (equal? (car listaString) (car listaSubstring))
                                   ; caso verdader
                                   (if (soniguales listaString listaSubstring #t)
                                       ; caso verdadero
                                       (posiciones (cdr listaString) listaSubstring (+ i 1) (cons i listaPos))
                                       ; caso falso
                                       (posiciones (cdr listaString) listaSubstring (+ i 1) listaPos)
                                       )
                                   ; caso falso
                                   (posiciones (cdr listaString) listaSubstring (+ i 1) listaPos)))
                    )
  )

; Descripcion:
; Dominio:
; Recorrido: 
(define string-search-all(lambda(string substring)
                           (posiciones (string->list string) (string->list substring) 0 null)
                           )
  )

; Descripcion:
; Dominio:
; Recorrido: 
(define reemplazar(lambda(contenido replaceText stringAux lisPos i searchText)
                      (if (null? lisPos)
                          ; caso verdadero
                          (string-append stringAux (substring contenido i (string-length contenido)))
                          ; caso falso
                          (reemplazar contenido replaceText (string-append stringAux (substring contenido i (car lisPos)) replaceText) (cdr lisPos) (+ (car lisPos) (string-length searchText)) searchText))
                    ))


; Descripcion:
; Dominio:
; Recorrido: 
(define reemplazarEncap(lambda (contenido replaceText searchText)
                         (reemplazar contenido replaceText "" (string-search-all contenido searchText) 0 searchText)
                         )
  )

; Descripcion:
; Dominio:
; Recorrido: 
(define searchAndReplace(lambda(paradigmadocs)(lambda(idDoc fecha searchText replaceText)
                                                (if (conectado? (getListaUsuario paradigmadocs))
                                                    ; caso verdadero
                                                    (if (or (equal? (getAutor(list-ref(getListaDocumentos paradigmadocs) (- idDoc 1))) (getNombreusuario(buscarConectado(getListaUsuario paradigmadocs))))
                                                            (tienePermisoEscritura? (getListaPermiso (list-ref(getListaDocumentos paradigmadocs) (- idDoc 1))) (getNombreusuario(buscarConectado(getListaUsuario paradigmadocs)))))
                                                        ; caso verdadero
                                                        (setListaUsuario (setListaDocumentos paradigmadocs (actualizarListaDocumentos (getListaDocumentos paradigmadocs)(setContenido (setListaHistorial (list-ref(getListaDocumentos paradigmadocs) (- idDoc 1)) (agregarListaHistorial (getListaHistorial(list-ref(getListaDocumentos paradigmadocs)(- idDoc 1))) 0 (getContenido(list-ref(getListaDocumentos paradigmadocs)(- idDoc 1))) (getNombreusuario(buscarConectado(getListaUsuario paradigmadocs))) fecha)) ((getFE paradigmadocs)(reemplazarEncap ((getFD paradigmadocs)(getContenido(list-ref(getListaDocumentos paradigmadocs)(- idDoc 1)))) replaceText searchText))))) (agregaLista (getListaUsuario paradigmadocs) (setEstado (buscarConectado(getListaUsuario paradigmadocs)) "Desconectado")))
                                                        ; caso falso
                                                        (setListaUsuario paradigmadocs (agregaLista (getListaUsuario paradigmadocs) (setEstado (buscarConectado(getListaUsuario paradigmadocs)) "Desconectado")))
                                                        )
                                                    ; caso falso
                                                    paradigmadocs
                                                    )
                                                )
                          )
  )

; applyStyles

; Descripcion:
; Dominio:
; Recorrido: 
(define generar(lambda(estilo)
                 (list->string (list #\# #\\ estilo))
                 )
  )

; Descripcion:
; Dominio:
; Recorrido: 
(define aplicar(lambda(searchText styles)
                 (if (null? styles)
                     ; caso verdadero
                     searchText
                     ; caso falso
                     (aplicar (string-append (generar (car styles)) " " searchText " " (generar (car styles))) (cdr styles))
                     )
                 )
  )

; Descripcion:
; Dominio:
; Recorrido: 
(define applyStyles(lambda(paradigmadocs)(lambda(idDoc fecha searchText . styles)
                                                (if (conectado? (getListaUsuario paradigmadocs))
                                                    ; caso verdadero
                                                    (if (or (equal? (getAutor(list-ref(getListaDocumentos paradigmadocs) (- idDoc 1))) (getNombreusuario(buscarConectado(getListaUsuario paradigmadocs))))
                                                            (tienePermisoEscritura? (getListaPermiso (list-ref(getListaDocumentos paradigmadocs) (- idDoc 1))) (getNombreusuario(buscarConectado(getListaUsuario paradigmadocs)))))
                                                        ; caso verdadero
                                                        (setListaUsuario (setListaDocumentos paradigmadocs (actualizarListaDocumentos (getListaDocumentos paradigmadocs)(setContenido (setListaHistorial (list-ref(getListaDocumentos paradigmadocs) (- idDoc 1)) (agregarListaHistorial (getListaHistorial(list-ref(getListaDocumentos paradigmadocs)(- idDoc 1))) 0 (getContenido(list-ref(getListaDocumentos paradigmadocs)(- idDoc 1))) (getNombreusuario(buscarConectado(getListaUsuario paradigmadocs))) fecha)) ((getFE paradigmadocs) (reemplazarEncap ((getFD paradigmadocs)(getContenido(list-ref(getListaDocumentos paradigmadocs)(- idDoc 1)))) (aplicar searchText styles) searchText))))) (agregaLista (getListaUsuario paradigmadocs) (setEstado (buscarConectado(getListaUsuario paradigmadocs)) "Desconectado")))
                                                        ; caso falso
                                                        (setListaUsuario paradigmadocs (agregaLista (getListaUsuario paradigmadocs) (setEstado (buscarConectado(getListaUsuario paradigmadocs)) "Desconectado")))
                                                        )
                                                    ; caso falso
                                                    paradigmadocs
                                                    )
                                                )
                          )
  )
; comment
; ctrlZ y ctrlY


; funcion encriptado y desencriptado.

; Descripcion:
; Dominio:
; Recorrido: 
(define cambiarLetras(lambda (lista)
                       (if (null? lista)
                           ; caso verdadero
                           null
                           ; caso falso
                           (cond
                             [(equal? #\a (car lista))(cons #\ψ (cambiarLetras (cdr lista)))]
                             [(equal? #\e (car lista))(cons #\ω (cambiarLetras (cdr lista)))]
                             [(equal? #\i (car lista))(cons #\ζ (cambiarLetras (cdr lista)))]
                             [(equal? #\o (car lista))(cons #\ξ (cambiarLetras (cdr lista)))]
                             [(equal? #\u (car lista))(cons #\ρ (cambiarLetras (cdr lista)))]
                             [(equal? #\ψ (car lista))(cons #\a (cambiarLetras (cdr lista)))]
                             [(equal? #\ω (car lista))(cons #\e (cambiarLetras (cdr lista)))]
                             [(equal? #\ζ (car lista))(cons #\i (cambiarLetras (cdr lista)))]
                             [(equal? #\ξ (car lista))(cons #\o (cambiarLetras (cdr lista)))]
                             [(equal? #\ρ (car lista))(cons #\u (cambiarLetras (cdr lista)))]
                             [else (cons (car lista) (cambiarLetras (cdr lista)))])
                           )
                       )
  )

; Descripcion:
; Dominio:
; Recorrido: 
(define encryptFunction (lambda (contenido)
                          (list->string(cambiarLetras (string->list contenido)))
                          )
  )

; Descripcion:
; Dominio:
; Recorrido: 
(define DecryptFunction (lambda (contenido)
                          (list->string(cambiarLetras (string->list contenido)))
                          )
  )

(define DuckDocsVacio(paradigmadocs "DuckDocs" (fecha 1 11 2021) encryptFunction DecryptFunction))
(define gDocs1
(register (register (register DuckDocsVacio (fecha 25 10 2021) "user1" "pass1") (fecha 25 10 2021) "user2"
"pass2") (fecha 25 10 2021) "user3" "pass3"))


(define gDocs2 ((login gDocs1 "user1" "pass1" create) (fecha 30 08 2021) "doc3" "contenido doc3"))
(define gDocs3 ((login gDocs2 "user2" "pass2" create) (fecha 30 08 2021) "doc0" "contenido doc0"))
(define gDocs4 ((login gDocs3 "user2" "pass2" create) (fecha 30 08 2021) "doc1" "contenido doc1"))
(define gDocs5 ((login gDocs4 "user1" "pass1" create) (fecha 30 08 2021) "doc0" "contenido doc0"))
(define gDocs6 ((login gDocs5 "user2" "pass2" create) (fecha 30 08 2021) "doc5" "contenido doc5"))
(define gDocs7 ((login gDocs6 "user3" "pass3" create) (fecha 30 08 2021) "doc1" "contenido doc1"))
(define gDocs8 ((login gDocs7 "user2" "pass2" create) (fecha 30 08 2021) "doc10" "contenido doc10"))
(define gDocs9 ((login gDocs8 "user3" "pass3" create) (fecha 30 08 2021) "doc2" "contenido doc2"))


(define gDocs10  ((login gDocs9 "user2" "pass2" share) 4 (acceso "user1" #\w) (acceso "user3" #\r) (acceso "user4" #\r)))

(define gDocs11 ((login gDocs10 "user2" "pass2" share) 2 (acceso "user1" #\c)))
(define gDocs12 ((login gDocs11 "user1" "pass1" add) 4 (fecha 8 11 2021) "mas contenido para el texto"))
(define gDocs13 ((login gDocs12 "user1" "pass1" add) 4 (fecha 9 11 2021) "aun mas contenido"))
(define gDocs14 ((login gDocs13 "user1" "pass1" search) "contenido"))
(define gDocs15 (login gDocs13 "user1" "pass1" paradigmadocs->string))
(define gDocs16 ((login gDocs13 "user1" "pass1" delete) 1 (fecha 9 11 2021) 3))
(define gDocs17 ((login gDocs16 "user1" "pass1" delete) 1 (fecha 10 11 2021) 10))
(define gDocs18 ((login gDocs17 "user1" "pass1" searchAndReplace) 4 (fecha 10 11 2021) "contenido" "tema"))
(define gDocs19 ((login gDocs18 "user1" "pass1" applyStyles) 4 (fecha 10 11 2021) "tema" #\t #\n))
;(define gDocs12 (login gDocs11 "user2" "pass2" revokeAllAccesses))
